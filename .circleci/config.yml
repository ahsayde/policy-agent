version: 2
jobs:
  build-push:
    docker:
      - image: magalixcorp/circleci-golang-lite:1.17

    steps:
      - run:
          name: Set up source path directory
          command: |
            echo 'export SOURCE_PATH=/home/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV
            echo 'export GO111MODULE=on' >> $BASH_ENV
            echo 'export GOPRIVATE=github.com/MagalixTechnologies' >> $BASH_ENV
      - run:
          name: Checkout code
          command: |
            mkdir -p ~/.ssh
            echo 'StrictHostKeyChecking no' >> ~/.ssh/config

            git config --global \
              url."ssh://git@github.com".insteadOf "https://github.com"

            git clone -q --recursive "$CIRCLE_REPOSITORY_URL" "$SOURCE_PATH"

            cd $SOURCE_PATH

            if [[ "$CIRCLE_TAG" ]]; then
              git checkout -q "$CIRCLE_TAG"
            fi

            if [[ "$CIRCLE_BRANCH" ]]; then
              git checkout -q "$CIRCLE_BRANCH"
            fi

      - run:
          name: Should push?
          command: |
            if [[ "$CIRCLE_BRANCH" == "dev" || "$CIRCLE_BRANCH" == "master" ]]
            then
              echo 'export SHOULD_PUSH=true' >> $BASH_ENV
            else
              echo :: will not push
            fi

      - restore_cache:
          keys:
            - go-src-pkg-cache-v2

      - run:
          name: Build binary
          command: |

            apk add build-base

            export GOCACHE=/go/cache/

            cd $SOURCE_PATH
            make build

      - save_cache:
          key: go-src-pkg-cache-v2
          paths:
            - /go/src/k8s.io/
            - /go/pkg/
            - /go/cache/

      - setup_remote_docker:
          reusable: true
          exclusive: true
      
      - run:
          name: Build docker image
          command: |
            cd $SOURCE_PATH

            COMMIT_COUNT=$(git rev-list --count HEAD)
            SHORT_HASH=$(git rev-parse --short HEAD)
            VERSION=${CIRCLE_BRANCH}-${COMMIT_COUNT}-${SHORT_HASH}

            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              export VERSION=$(<version.txt)
            fi

            if [[ "$CIRCLE_BRANCH" == "dev" ]]; then
              export VERSION=dev
            fi

            make image VERSION=$VERSION

      - run:
          name: Scan The Image
          command: |
            cd $SOURCE_PATH
            REPO=policy-agent
            COMMIT_COUNT=$(git rev-list --count HEAD)
            SHORT_HASH=$(git rev-parse --short HEAD)
            VERSION=${CIRCLE_BRANCH}-${COMMIT_COUNT}-${SHORT_HASH}
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              export VERSION=$(<version.txt)
            fi
            if [[ "$CIRCLE_BRANCH" == "dev" ]]; then
              export VERSION=dev
            fi

            echo scanning ${REPO}:${VERSION}
            ssh remote-docker 'curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin'
            ssh remote-docker grype "${REPO}:${VERSION}" --scope all-layers > /tmp/report.txt #--fail-on high to fail on sev high

      - store_artifacts:
          path: /tmp/report.txt

      - deploy:
          name: Release and push to Docker Registry
          command: |
            if [[ ! "$SHOULD_PUSH" ]]; then
              echo :: no push

              exit 0
            fi

            cd $SOURCE_PATH

            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"

            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              export VERSION=$(<version.txt)
              git config user.email "release-ci@weave.works"
              git config user.name "release-ci"
              git tag -a v$VERSION -m "Policy Agent v$VERSION release" 
              git push -u origin v$VERSION
            fi

            if [[ "$CIRCLE_BRANCH" == "dev" ]]; then
              export VERSION=dev
            fi

            make push@magalixcorp tag-file=new-tag version-file=new-version VERSION=$VERSION

  tests:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    steps:
      - run:
          name: Set up source path directory
          command: |
            echo 'export GO111MODULE=on' >> $BASH_ENV
            echo 'export GOPRIVATE=github.com/MagalixTechnologies' >> $BASH_ENV
      
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      
      - run:
          name: Running ElasticSearch
          command: |
            docker run -itd --name elasticsearch -p 9200:9200 -e "discovery.type=single-node" -e "xpack.security.enabled=false" docker.elastic.co/elasticsearch/elasticsearch:8.3.3
          docker_layer_caching: true

      - run:
          name: Wait for elasticsearch docker image
          command: dockerize -wait http://localhost:9200 -timeout 2m
      
      - checkout
      - run:
          name: run test
          command: |
            go test -v -cover -covermode=atomic -coverprofile=coverage.txt ./...
            bash <(curl -s https://codecov.io/bash) -F unit

workflows:
  version: 2
  test_build:
    jobs:
      - tests
      - build-push:
          requires:
            - tests
